import traceback

from telegrinder.rules import CallbackDataEq, IsPrivate, FuncRule
from telegrinder import CallbackQuery, Dispatch, Message
from telegrinder.types import Nothing
from telegrinder import InlineKeyboard, InlineButton

from client import api, ctx
from tools import save_mess, delete_mess, decode
from handlers.executor import ExecutorType, DispatchExecutor
from rules import Application
from operations import get_system
from config import *

dp = Dispatch()

CANCEL_KEYBOARD = (
    InlineKeyboard()
    .add(InlineButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="application_cancel"))
).get_markup()

executor_application = DispatchExecutor(title="application",
                                        type_executor=ExecutorType.COMMAND
                                        )


@dp.callback_query(CallbackDataEq("application_cancel"))
async def application_cancel(cq: CallbackQuery) -> None:
    try:
        ctx_state_cancel = await Application.get(cq.message.unwrap().v.chat.id)
        stages = Application.STAGES

        state_cancel = ctx_state_cancel
        state = stages[stages.index(state_cancel) - 1]

        await Application.set(cq.message.unwrap().v.chat.id, state)
        match state:
            case Application.NAME:
                cq.message.unwrap().v.message_id = -1
                await start_application_cq.func(cq)
            case Application.COUNTRY:
                cq.message.unwrap().v.message_id = -1
                await part_name.func(cq.message.unwrap().v)
            case Application.CARGO:
                cq.message.unwrap().v.message_id = -1
                await part_country.func(cq.message.unwrap().v)

    except Exception:
        executor_application.traceback = traceback.format_exc()
    finally:
        await executor_application.logger(cq, intermediate=True)


@dp.callback_query(CallbackDataEq("app"))
async def start_application_cq(cq: CallbackQuery) -> None:
    try:

        if cq.message.unwrap().v.message_id > 0:
            ctx.set(f"application_{cq.from_.id}", {})

        message = cq.message.unwrap().v

        await delete_mess(message.chat.id)
        response1 = await api.send_message(text="üîπ–ë–æ—Ç VL-BROKER –ø–æ–º–æ–∂–µ—Ç –í–∞–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ—ë –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º!"
                                           "\n\nüìå–î–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∏ –Ω–∏ –∫ —á–µ–º—É –í–∞—Å –Ω–µ –æ–±—è–∑—ã–≤–∞–µ—Ç. ",
                                           chat_id=message.chat.id)
        response2 = await api.send_message(text=f"1. –ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?",
                                           chat_id=message.chat.id)

        await save_mess(response1.unwrap())
        await save_mess(response2.unwrap())

        await Application.set(message.chat.id, Application.NAME)

    except Exception:
        executor_application.traceback = traceback.format_exc()
    finally:
        await executor_application.logger(cq, intermediate=True)


@dp.message(Application(Application.NAME))
async def part_name(message: Message) -> None:
    try:
        await save_mess(message)
        await delete_mess(message.chat.id)

        from_ = message.from_.unwrap()

        if message.message_id > 0:
            application = ctx.get(f"application_{from_.id}")
            application["name"] = message.text.unwrap()
            ctx.set(f"application_{from_.id}", application)

        await delete_mess(message.chat.id)
        response = await api.send_message(text=f"2. –ò–∑ –∫–∞–∫–æ–≥–æ –í—ã –≥–æ—Ä–æ–¥–∞?",
                                          reply_markup=CANCEL_KEYBOARD,
                                          chat_id=message.chat.id)
        await save_mess(response.unwrap())

        await Application.set(message.chat.id, Application.COUNTRY)

    except Exception:
        executor_application.traceback = traceback.format_exc()
    finally:
        await executor_application.logger(message, intermediate=True)


@dp.message(Application(Application.COUNTRY))
async def part_country(message: Message) -> None:
    try:
        await save_mess(message)
        await delete_mess(message.chat.id)

        from_ = message.from_.unwrap()

        if message.message_id > 0:
            application = ctx.get(f"application_{from_.id}")
            application["country"] = message.text.unwrap()
            ctx.set(f"application_{from_.id}", application)

        await delete_mess(message.chat.id)
        response = await api.send_message(text=f"3. –¢–µ–∑–∏—Å–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≥—Ä—É–∑:",
                                          reply_markup=CANCEL_KEYBOARD,
                                          chat_id=message.chat.id)
        await save_mess(response.unwrap())

        await Application.set(from_.id, Application.CARGO)

    except Exception:
        executor_application.traceback = traceback.format_exc()
    finally:
        await executor_application.logger(message, intermediate=True)


@dp.message(Application(Application.CARGO))
async def part_cargo(message: Message) -> None:
    try:

        await save_mess(message)
        await delete_mess(message.chat.id)

        from_ = message.from_.unwrap()

        application = ctx.get(f"application_{from_.id}")
        application["cargo"] = message.text.unwrap()
        ctx.set(f"application_{from_.id}", application)

        await delete_mess(message.chat.id)
        response = await api.send_message(text=f"4. –£–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                                          reply_markup=CANCEL_KEYBOARD,
                                          chat_id=message.chat.id)
        await save_mess(response.unwrap())

        await Application.set(from_.id, Application.NUMBER)

    except Exception:
        executor_application.traceback = traceback.format_exc()
    finally:
        await executor_application.logger(message, intermediate=True)


@dp.message(Application(Application.NUMBER))
async def part_number(message: Message) -> None:
    try:

        await save_mess(message)
        await delete_mess(message.chat.id)

        from_ = message.from_.unwrap()

        application = ctx.get(f"application_{from_.id}")
        application["number"] = message.text.unwrap()
        ctx.delete(f"application_{from_.id}")

        await delete_mess(message.chat.id)
        response = await message.answer("–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏!"
                                        "\n–†–∞–±–æ—Ç–∞–µ–º –ø–æ –≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–ú–°–ö+7)."
                                        "\n\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ VL-BROKER!"
                                        "\n\nüìå–£–≤–∞–∂–∞–µ–º—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—É –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª.")
        await save_mess(response.unwrap())

        accept_keyboard = (
            InlineKeyboard()
            .add(InlineButton("–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É", callback_data="app_accept")).row()
        ).get_markup()

        if from_.username == Nothing:
            username = from_.full_name
        else:
            username = "@" + from_.username.unwrap()

        await api.send_message(text=f"‚ùóÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {from_.first_name}!"
                                    f"\n‚ñ∂ –ò–º—è: {application['name']}"
                                    f"\n‚ñ∂ –ì–æ—Ä–æ–¥: {application['country']}"
                                    f"\n‚ñ∂ –û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞: {application['cargo']}"
                                    f"\n‚ñ∂ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {application['number']}"
                                    f"\n\n‚úàÔ∏è Telegram:"
                                    f"\n‚ñ∂ Name: {from_.first_name}"
                                    f"\n‚ñ∂ Username: {username}",
                               chat_id=ADMIN_CHAT,
                               reply_markup=accept_keyboard
                               )

        await Application.delete(from_.id)

    except Exception:
        executor_application.traceback = traceback.format_exc()
    finally:
        await executor_application.logger(message)


executor_application_accept = DispatchExecutor(title="application_accept",
                                               type_executor=ExecutorType.COMMAND
                                               )


@dp.callback_query(CallbackDataEq("app_accept"))
async def edit_application_cq(cq: CallbackQuery) -> None:
    try:

        if cq.from_.username == Nothing:
            username = cq.from_.full_name
        else:
            username = "@" + cq.from_.username.unwrap()

        message = cq.message.unwrap().v
        text_application = message.text.unwrap()
        await api.edit_message_text(text=text_application.replace("–ù–æ–≤–∞—è –∑", "–ó").replace("‚ùóÔ∏è", "‚úîÔ∏è") + f"\n\n‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {username}",
                                    message_id=message.message_id,
                                    chat_id=ADMIN_CHAT)

    except KeyError:
        await cq.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception:
        executor_application_accept.traceback = traceback.format_exc()
    finally:
        await executor_application_accept.logger(cq)
