import asyncio
import traceback
import time

from client import api, fmt, ctx
from handlers.executor import ExecutorType, DispatchExecutor
from permissions_store import is_admin
from patterns import ERROR_PERMISSION
from operations import get_system, get_users_all, get_users
from models import User
from typing import Any

from tools import digit, delete_mess, save_mess, time_converter
from rules import CallbackDataStartsWith, Distribution

from telegrinder.tools import bold, escape, HTMLFormatter, link
from telegrinder import InlineKeyboard, InlineButton, Dispatch, Message, CallbackQuery
from telegrinder.rules import Text, IsPrivate, Command, Argument
from telegrinder.types import ReplyParameters

dp = Dispatch()


ADD_MESSAGE_KEYBOARD = (
    InlineKeyboard()
    .add(InlineButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="add_message:2")).row()
    .add(InlineButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="add_message:1")).row()
    .add(InlineButton("‚ùå", callback_data="add_message:0"))
).get_markup()

CONFIRM_KEYBOARD = (
    InlineKeyboard()
    .add(InlineButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data="distribution:1")).row()
    .add(InlineButton("–û—Ç–º–µ–Ω–∞", callback_data="distribution:0"))
).get_markup()

executor = DispatchExecutor(title="distribution",
                            permission="operations.admin",
                            type_executor=ExecutorType.COMMAND
                            )


@dp.message(Text("/—Ä–∞—Å—Å—ã–ª–∫–∞"))
async def distribution(message: Message) -> None:
    try:
        if not is_admin(message.from_.unwrap().id):
            await message.answer(ERROR_PERMISSION)
            return

        response = await message.answer(text="üì≤ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        await save_mess(response.unwrap())

        await Distribution.set(message.chat.id, Distribution.TEXT)

    except Exception:
        executor.traceback = traceback.format_exc()
    finally:
        await executor.logger(message)


@dp.message(Distribution(Distribution.TEXT))
async def distribution_text(message: Message) -> None:
    try:
        ctx.set("distribution", {"message_id": message.message_id, "from_chat_id": message.chat.id})

        response = await message.answer(text=f"üßæ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ.\n\n",
                                        reply_markup=ADD_MESSAGE_KEYBOARD)
        await save_mess(response.unwrap())

        # —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages_storage = ctx.get(f"messages_{message.chat.id}")
        messages_storage.remove(message.message_id)
        ctx.set(f"messages_{message.chat.id}", messages_storage)

        await Distribution.set(message.chat.id, Distribution.ADD_MESSAGE)

    except Exception:
        executor.traceback = traceback.format_exc()
    finally:
        await executor.logger(message, intermediate=True)


@dp.callback_query(CallbackDataStartsWith("add_message"))
async def distribution_add_message(cq: CallbackQuery) -> None:
    try:
        users = get_users_all()
        distribution = ctx.get("distribution")

        type_add_message = int(cq.data.unwrap().replace("add_message:", ""))
        distribution["type_add_message"] = type_add_message

        ctx.set("distribution", distribution)

        response = await api.send_message(chat_id=cq.message.unwrap().v.chat.id,
                                          text=f"üìå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ {digit(len(users))} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n",
                                          reply_markup=CONFIRM_KEYBOARD
                                          )
        await save_mess(response.unwrap())

        await Distribution.delete(cq.message.unwrap().v.chat.id)

    except Exception:
        executor.traceback = traceback.format_exc()
    finally:
        await executor.logger(cq, intermediate=True)


@dp.callback_query(CallbackDataStartsWith("distribution"))
async def distribution_confirm(cq: CallbackQuery) -> None:
    try:
        confirm = int(cq.data.unwrap().replace("distribution:", ""))

        users = get_users_all()
        # users = get_users("group", "Admin")

        # users = [7022086113, 7028770823, 113431]

        if confirm:
            distribution_ = ctx.get("distribution")
            message_id = distribution_["message_id"]
            from_chat_id = distribution_["from_chat_id"]
            type_add_message = distribution_["type_add_message"]

            await delete_mess(cq.message.unwrap().v.chat.id)

            time = time_converter(((len(users) // 20) * 3 + len(users) * 0.5), 0)
            await api.send_message(chat_id=cq.message.unwrap().v.chat.id,
                                   text=f"‚è±Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞, –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ–ª–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ ~{time}"
                                   )

            count = await start_distribution(users, from_chat_id, message_id, type_add_message)

            message_result = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {digit(count)}/{digit(len(users))} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."

        else:
            message_result = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."

        ctx.delete(f"distribution")

        await api.send_message(chat_id=cq.message.unwrap().v.chat.id,
                               text=message_result
                               )

    except Exception:
        executor.traceback = traceback.format_exc()
    finally:
        await executor.logger(cq, intermediate=True)


async def start_distribution(users: list[User], from_chat_id: int, message_id, type_add_message) -> int:
    counter = 0

    for user in users:

        if counter % 20 == 0:
            await asyncio.sleep(3)

        try:
            response = await send_distribution(user, from_chat_id, message_id, type_add_message)

            if not hasattr(response, "error"):
                counter += 1

        except Exception:
            pass

    return counter

ADD_MESSAGE_KEYBOARD_2 = (
    InlineKeyboard()
    .add(InlineButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="app"))
).get_markup()

ADD_MESSAGE_KEYBOARD_1 = (
    InlineKeyboard()
    .add(InlineButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", url="https://vk.com/reviews-211743331"))
).get_markup()


async def send_distribution(user: User, from_chat_id: int, message_id, type_add_message) -> Any:
    responses = []
    message_log = f"[{user.tgid}] | "

    response = await api.forward_message(chat_id=user.tgid,
                                         from_chat_id=from_chat_id,
                                         message_id=message_id
                                         )

    message_log += f"{response.unwrap().message_id} | "

    if type_add_message == 2:
        response_ = await api.send_message(chat_id=user.tgid,
                                           text=HTMLFormatter(bold("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤—ã–≥–æ–¥–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º:")),
                                           parse_mode=fmt.PARSE_MODE,
                                           reply_markup=ADD_MESSAGE_KEYBOARD_2
                                           )
        message_log += f"{response_.unwrap().message_id} | "

    elif type_add_message == 1:
        response_ = await api.send_message(chat_id=user.tgid,
                                           text=HTMLFormatter(bold("–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ 10 000 —Ä—É–±–ª–µ–π!")),
                                           parse_mode=fmt.PARSE_MODE,
                                           reply_markup=ADD_MESSAGE_KEYBOARD_1
                                           )
        message_log += f"{response_.unwrap().message_id}"

    print(message_log)

    return response

# @dp.message(Command("—Ä–∞—Å—Å—ã–ª–∫–∞", Argument("text_msg"), separator="-"))
# async def distribution(message: Message, text_msg) -> None:
#     try:
#         if not is_admin(message.from_.unwrap().id):
#             await message.answer(ERROR_PERMISSION)
#             return
#
#         msg = message.text.unwrap().replace("/—Ä–∞—Å—Å—ã–ª–∫–∞ ", "")
#
#         photo = message.photo.unwrap_or(None)
#
#         system = get_system()
#         users = get_users_all()
#
#         await delete_mess(message.chat.id)
#         response = await message.answer(text="üì≤ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ.\n"
#                                              f"üìå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ {digit(len(users))} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
#                                              f"{text_msg}",
#                                         reply_markup=CONFIRM_KEYBOARD,
#                                         document=document.file_id if document else document,
#                                         photo=photo.file_id if photo else photo)
#         await save_mess(response.unwrap())
#
#         ctx.set(f"distribution", text_msg)
#         ctx.set(f"distribution:attachments", {"photo": photo, "document": document})
#
#     except Exception:
#         executor.traceback = traceback.format_exc()
#     finally:
#         await executor.logger(message)
#
#
# @dp.callback_query(CallbackDataStartsWith("distribution"))
# async def calculator_auto_cancel(cq: CallbackQuery) -> None:
#     try:
#         confirm = int(cq.data.unwrap().replace("distribution:", ""))
#
#         # users = get_users_all()
#
#         users = [7022086113, 7028770823, 113431]
#         text_msg = ctx.get(f"distribution")
#
#         await delete_mess(cq.message.unwrap().v.chat.id)
#         if confirm:
#             count = await start_distribution(users, text_msg)
#             message_result = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {digit(count)}/{digit(len(users))} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
#         else:
#             ctx.delete(f"distribution")
#             message_result = (f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
#                               f"""
# {HTMLFormatter(bold("–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–Ω–æ—Å–∞–º–µ–Ω—Ç?"))}
#
# {HTMLFormatter(escape("üîπ–ö–æ–Ω–æ—Å–∞–º–µ–Ω—Ç ‚Äî –¥–æ–∫—É–º–µ–Ω—Ç, –≤—ã–¥–∞–≤–∞–µ–º—ã–π –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–º –≥—Ä—É–∑–∞ –≥—Ä—É–∑–æ–≤–ª–∞–¥–µ–ª—å—Ü—É. –û–Ω —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Ç–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä."))}
#
# {HTMLFormatter(escape("üìå–ê –¥–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω –∫–æ–Ω–æ—Å–∞–º–µ–Ω—Ç –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: "))}{HTMLFormatter(link("https://t.me/vlbroker/270", "–ö–æ–Ω–æ—Å–∞–º–µ–Ω—Ç "))}
# """)
#
#         await api.send_message(chat_id=cq.message.unwrap().v.chat.id,
#                                text=message_result)
#
#     except Exception:
#         executor.traceback = traceback.format_exc()
#     finally:
#         await executor.logger(cq, intermediate=True)
#
#
# async def start_distribution(users: list[User], text: str) -> int:
#     counter = 0
#     for user in users:
#
#         if counter % 20 == 0:
#             await asyncio.sleep(3)
#
#         try:
#             response = await api.send_message(chat_id=user,
#                                               text=text,
#                                               parse_mode=fmt.PARSE_MODE)
#
#             if not hasattr(response, "error"):
#                 counter += 1
#
#         except Exception:
#             pass
#
#     return counter
